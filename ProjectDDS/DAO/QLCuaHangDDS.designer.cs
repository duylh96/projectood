#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectDDS.DAO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLCuaHangDDS")]
	public partial class QLCuaHangDDSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCPU(CPU instance);
    partial void UpdateCPU(CPU instance);
    partial void DeleteCPU(CPU instance);
    partial void InsertXUNGNHIPRAM(XUNGNHIPRAM instance);
    partial void UpdateXUNGNHIPRAM(XUNGNHIPRAM instance);
    partial void DeleteXUNGNHIPRAM(XUNGNHIPRAM instance);
    partial void InsertCPUSOCKET(CPUSOCKET instance);
    partial void UpdateCPUSOCKET(CPUSOCKET instance);
    partial void DeleteCPUSOCKET(CPUSOCKET instance);
    partial void InsertCHITIETHOADONBANHANG(CHITIETHOADONBANHANG instance);
    partial void UpdateCHITIETHOADONBANHANG(CHITIETHOADONBANHANG instance);
    partial void DeleteCHITIETHOADONBANHANG(CHITIETHOADONBANHANG instance);
    partial void InsertHANGSXCPU(HANGSXCPU instance);
    partial void UpdateHANGSXCPU(HANGSXCPU instance);
    partial void DeleteHANGSXCPU(HANGSXCPU instance);
    partial void InsertHARDDISK(HARDDISK instance);
    partial void UpdateHARDDISK(HARDDISK instance);
    partial void DeleteHARDDISK(HARDDISK instance);
    partial void InsertHARDDISKINTERFACE(HARDDISKINTERFACE instance);
    partial void UpdateHARDDISKINTERFACE(HARDDISKINTERFACE instance);
    partial void DeleteHARDDISKINTERFACE(HARDDISKINTERFACE instance);
    partial void InsertHARDDISKPSTYPE(HARDDISKPSTYPE instance);
    partial void UpdateHARDDISKPSTYPE(HARDDISKPSTYPE instance);
    partial void DeleteHARDDISKPSTYPE(HARDDISKPSTYPE instance);
    partial void InsertHARDDISKSIZE(HARDDISKSIZE instance);
    partial void UpdateHARDDISKSIZE(HARDDISKSIZE instance);
    partial void DeleteHARDDISKSIZE(HARDDISKSIZE instance);
    partial void InsertHOADONBANHANG(HOADONBANHANG instance);
    partial void UpdateHOADONBANHANG(HOADONBANHANG instance);
    partial void DeleteHOADONBANHANG(HOADONBANHANG instance);
    partial void InsertLAPTOP(LAPTOP instance);
    partial void UpdateLAPTOP(LAPTOP instance);
    partial void DeleteLAPTOP(LAPTOP instance);
    partial void InsertLOAIHARDDISK(LOAIHARDDISK instance);
    partial void UpdateLOAIHARDDISK(LOAIHARDDISK instance);
    partial void DeleteLOAIHARDDISK(LOAIHARDDISK instance);
    partial void InsertLOAIRAM(LOAIRAM instance);
    partial void UpdateLOAIRAM(LOAIRAM instance);
    partial void DeleteLOAIRAM(LOAIRAM instance);
    partial void InsertMAINBOARD(MAINBOARD instance);
    partial void UpdateMAINBOARD(MAINBOARD instance);
    partial void DeleteMAINBOARD(MAINBOARD instance);
    partial void InsertMAINBOARDDETAIL(MAINBOARDDETAIL instance);
    partial void UpdateMAINBOARDDETAIL(MAINBOARDDETAIL instance);
    partial void DeleteMAINBOARDDETAIL(MAINBOARDDETAIL instance);
    partial void InsertPSU(PSU instance);
    partial void UpdatePSU(PSU instance);
    partial void DeletePSU(PSU instance);
    partial void InsertRAM(RAM instance);
    partial void UpdateRAM(RAM instance);
    partial void DeleteRAM(RAM instance);
    partial void InsertVGA(VGA instance);
    partial void UpdateVGA(VGA instance);
    partial void DeleteVGA(VGA instance);
    #endregion
		
		public QLCuaHangDDSDataContext() : 
				base(global::ProjectDDS.Properties.Settings.Default.QLCuaHangDDSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QLCuaHangDDSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLCuaHangDDSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLCuaHangDDSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLCuaHangDDSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CPU> CPUs
		{
			get
			{
				return this.GetTable<CPU>();
			}
		}
		
		public System.Data.Linq.Table<XUNGNHIPRAM> XUNGNHIPRAMs
		{
			get
			{
				return this.GetTable<XUNGNHIPRAM>();
			}
		}
		
		public System.Data.Linq.Table<CPUSOCKET> CPUSOCKETs
		{
			get
			{
				return this.GetTable<CPUSOCKET>();
			}
		}
		
		public System.Data.Linq.Table<CHITIETHOADONBANHANG> CHITIETHOADONBANHANGs
		{
			get
			{
				return this.GetTable<CHITIETHOADONBANHANG>();
			}
		}
		
		public System.Data.Linq.Table<HANGSXCPU> HANGSXCPUs
		{
			get
			{
				return this.GetTable<HANGSXCPU>();
			}
		}
		
		public System.Data.Linq.Table<HARDDISK> HARDDISKs
		{
			get
			{
				return this.GetTable<HARDDISK>();
			}
		}
		
		public System.Data.Linq.Table<HARDDISKINTERFACE> HARDDISKINTERFACEs
		{
			get
			{
				return this.GetTable<HARDDISKINTERFACE>();
			}
		}
		
		public System.Data.Linq.Table<HARDDISKPSTYPE> HARDDISKPSTYPEs
		{
			get
			{
				return this.GetTable<HARDDISKPSTYPE>();
			}
		}
		
		public System.Data.Linq.Table<HARDDISKSIZE> HARDDISKSIZEs
		{
			get
			{
				return this.GetTable<HARDDISKSIZE>();
			}
		}
		
		public System.Data.Linq.Table<HOADONBANHANG> HOADONBANHANGs
		{
			get
			{
				return this.GetTable<HOADONBANHANG>();
			}
		}
		
		public System.Data.Linq.Table<LAPTOP> LAPTOPs
		{
			get
			{
				return this.GetTable<LAPTOP>();
			}
		}
		
		public System.Data.Linq.Table<LOAIHARDDISK> LOAIHARDDISKs
		{
			get
			{
				return this.GetTable<LOAIHARDDISK>();
			}
		}
		
		public System.Data.Linq.Table<LOAIRAM> LOAIRAMs
		{
			get
			{
				return this.GetTable<LOAIRAM>();
			}
		}
		
		public System.Data.Linq.Table<MAINBOARD> MAINBOARDs
		{
			get
			{
				return this.GetTable<MAINBOARD>();
			}
		}
		
		public System.Data.Linq.Table<MAINBOARDDETAIL> MAINBOARDDETAILs
		{
			get
			{
				return this.GetTable<MAINBOARDDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<PSU> PSUs
		{
			get
			{
				return this.GetTable<PSU>();
			}
		}
		
		public System.Data.Linq.Table<RAM> RAMs
		{
			get
			{
				return this.GetTable<RAM>();
			}
		}
		
		public System.Data.Linq.Table<VGA> VGAs
		{
			get
			{
				return this.GetTable<VGA>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CPU")]
	public partial class CPU : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ten;
		
		private System.Nullable<decimal> _DonGia;
		
		private string _TenHangSXCPU;
		
		private string _TenSocket;
		
		private string _MoTa;
		
		private EntityRef<CPUSOCKET> _CPUSOCKET;
		
		private EntityRef<HANGSXCPU> _HANGSXCPU;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    partial void OnTenHangSXCPUChanging(string value);
    partial void OnTenHangSXCPUChanged();
    partial void OnTenSocketChanging(string value);
    partial void OnTenSocketChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    #endregion
		
		public CPU()
		{
			this._CPUSOCKET = default(EntityRef<CPUSOCKET>);
			this._HANGSXCPU = default(EntityRef<HANGSXCPU>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Money")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenHangSXCPU", DbType="NVarChar(10)")]
		public string TenHangSXCPU
		{
			get
			{
				return this._TenHangSXCPU;
			}
			set
			{
				if ((this._TenHangSXCPU != value))
				{
					if (this._HANGSXCPU.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenHangSXCPUChanging(value);
					this.SendPropertyChanging();
					this._TenHangSXCPU = value;
					this.SendPropertyChanged("TenHangSXCPU");
					this.OnTenHangSXCPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenSocket", DbType="NVarChar(10)")]
		public string TenSocket
		{
			get
			{
				return this._TenSocket;
			}
			set
			{
				if ((this._TenSocket != value))
				{
					if (this._CPUSOCKET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenSocketChanging(value);
					this.SendPropertyChanging();
					this._TenSocket = value;
					this.SendPropertyChanged("TenSocket");
					this.OnTenSocketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NVarChar(MAX)")]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CPUSOCKET_CPU", Storage="_CPUSOCKET", ThisKey="TenSocket", OtherKey="TenSocket", IsForeignKey=true)]
		public CPUSOCKET CPUSOCKET
		{
			get
			{
				return this._CPUSOCKET.Entity;
			}
			set
			{
				CPUSOCKET previousValue = this._CPUSOCKET.Entity;
				if (((previousValue != value) 
							|| (this._CPUSOCKET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CPUSOCKET.Entity = null;
						previousValue.CPUs.Remove(this);
					}
					this._CPUSOCKET.Entity = value;
					if ((value != null))
					{
						value.CPUs.Add(this);
						this._TenSocket = value.TenSocket;
					}
					else
					{
						this._TenSocket = default(string);
					}
					this.SendPropertyChanged("CPUSOCKET");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HANGSXCPU_CPU", Storage="_HANGSXCPU", ThisKey="TenHangSXCPU", OtherKey="TenHangSXCPU", IsForeignKey=true)]
		public HANGSXCPU HANGSXCPU
		{
			get
			{
				return this._HANGSXCPU.Entity;
			}
			set
			{
				HANGSXCPU previousValue = this._HANGSXCPU.Entity;
				if (((previousValue != value) 
							|| (this._HANGSXCPU.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HANGSXCPU.Entity = null;
						previousValue.CPUs.Remove(this);
					}
					this._HANGSXCPU.Entity = value;
					if ((value != null))
					{
						value.CPUs.Add(this);
						this._TenHangSXCPU = value.TenHangSXCPU;
					}
					else
					{
						this._TenHangSXCPU = default(string);
					}
					this.SendPropertyChanged("HANGSXCPU");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.XUNGNHIPRAM")]
	public partial class XUNGNHIPRAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenXungNhip;
		
		private EntitySet<LAPTOP> _LAPTOPs;
		
		private EntitySet<MAINBOARDDETAIL> _MAINBOARDDETAILs;
		
		private EntitySet<RAM> _RAMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenXungNhipChanging(string value);
    partial void OnTenXungNhipChanged();
    #endregion
		
		public XUNGNHIPRAM()
		{
			this._LAPTOPs = new EntitySet<LAPTOP>(new Action<LAPTOP>(this.attach_LAPTOPs), new Action<LAPTOP>(this.detach_LAPTOPs));
			this._MAINBOARDDETAILs = new EntitySet<MAINBOARDDETAIL>(new Action<MAINBOARDDETAIL>(this.attach_MAINBOARDDETAILs), new Action<MAINBOARDDETAIL>(this.detach_MAINBOARDDETAILs));
			this._RAMs = new EntitySet<RAM>(new Action<RAM>(this.attach_RAMs), new Action<RAM>(this.detach_RAMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenXungNhip", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenXungNhip
		{
			get
			{
				return this._TenXungNhip;
			}
			set
			{
				if ((this._TenXungNhip != value))
				{
					this.OnTenXungNhipChanging(value);
					this.SendPropertyChanging();
					this._TenXungNhip = value;
					this.SendPropertyChanged("TenXungNhip");
					this.OnTenXungNhipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="XUNGNHIPRAM_LAPTOP", Storage="_LAPTOPs", ThisKey="TenXungNhip", OtherKey="TenXungNhip")]
		public EntitySet<LAPTOP> LAPTOPs
		{
			get
			{
				return this._LAPTOPs;
			}
			set
			{
				this._LAPTOPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="XUNGNHIPRAM_MAINBOARDDETAIL", Storage="_MAINBOARDDETAILs", ThisKey="TenXungNhip", OtherKey="TenXungNhip")]
		public EntitySet<MAINBOARDDETAIL> MAINBOARDDETAILs
		{
			get
			{
				return this._MAINBOARDDETAILs;
			}
			set
			{
				this._MAINBOARDDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="XUNGNHIPRAM_RAM", Storage="_RAMs", ThisKey="TenXungNhip", OtherKey="TenXungNhip")]
		public EntitySet<RAM> RAMs
		{
			get
			{
				return this._RAMs;
			}
			set
			{
				this._RAMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LAPTOPs(LAPTOP entity)
		{
			this.SendPropertyChanging();
			entity.XUNGNHIPRAM = this;
		}
		
		private void detach_LAPTOPs(LAPTOP entity)
		{
			this.SendPropertyChanging();
			entity.XUNGNHIPRAM = null;
		}
		
		private void attach_MAINBOARDDETAILs(MAINBOARDDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.XUNGNHIPRAM = this;
		}
		
		private void detach_MAINBOARDDETAILs(MAINBOARDDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.XUNGNHIPRAM = null;
		}
		
		private void attach_RAMs(RAM entity)
		{
			this.SendPropertyChanging();
			entity.XUNGNHIPRAM = this;
		}
		
		private void detach_RAMs(RAM entity)
		{
			this.SendPropertyChanging();
			entity.XUNGNHIPRAM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CPUSOCKET")]
	public partial class CPUSOCKET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenSocket;
		
		private EntitySet<CPU> _CPUs;
		
		private EntitySet<MAINBOARD> _MAINBOARDs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenSocketChanging(string value);
    partial void OnTenSocketChanged();
    #endregion
		
		public CPUSOCKET()
		{
			this._CPUs = new EntitySet<CPU>(new Action<CPU>(this.attach_CPUs), new Action<CPU>(this.detach_CPUs));
			this._MAINBOARDs = new EntitySet<MAINBOARD>(new Action<MAINBOARD>(this.attach_MAINBOARDs), new Action<MAINBOARD>(this.detach_MAINBOARDs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenSocket", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenSocket
		{
			get
			{
				return this._TenSocket;
			}
			set
			{
				if ((this._TenSocket != value))
				{
					this.OnTenSocketChanging(value);
					this.SendPropertyChanging();
					this._TenSocket = value;
					this.SendPropertyChanged("TenSocket");
					this.OnTenSocketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CPUSOCKET_CPU", Storage="_CPUs", ThisKey="TenSocket", OtherKey="TenSocket")]
		public EntitySet<CPU> CPUs
		{
			get
			{
				return this._CPUs;
			}
			set
			{
				this._CPUs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CPUSOCKET_MAINBOARD", Storage="_MAINBOARDs", ThisKey="TenSocket", OtherKey="TenSocket")]
		public EntitySet<MAINBOARD> MAINBOARDs
		{
			get
			{
				return this._MAINBOARDs;
			}
			set
			{
				this._MAINBOARDs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CPUs(CPU entity)
		{
			this.SendPropertyChanging();
			entity.CPUSOCKET = this;
		}
		
		private void detach_CPUs(CPU entity)
		{
			this.SendPropertyChanging();
			entity.CPUSOCKET = null;
		}
		
		private void attach_MAINBOARDs(MAINBOARD entity)
		{
			this.SendPropertyChanging();
			entity.CPUSOCKET = this;
		}
		
		private void detach_MAINBOARDs(MAINBOARD entity)
		{
			this.SendPropertyChanging();
			entity.CPUSOCKET = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CHITIETHOADONBANHANG")]
	public partial class CHITIETHOADONBANHANG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaHD;
		
		private string _TenMH;
		
		private System.Nullable<int> _SoLuong;
		
		private System.Nullable<decimal> _DonGia;
		
		private System.Nullable<double> _GiamGiaTrenMatHang;
		
		private System.Nullable<double> _GiamGiaTrenThanhTien;
		
		private System.Nullable<decimal> _ThanhTien;
		
		private EntityRef<HOADONBANHANG> _HOADONBANHANG;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaHDChanging(int value);
    partial void OnMaHDChanged();
    partial void OnTenMHChanging(string value);
    partial void OnTenMHChanged();
    partial void OnSoLuongChanging(System.Nullable<int> value);
    partial void OnSoLuongChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    partial void OnGiamGiaTrenMatHangChanging(System.Nullable<double> value);
    partial void OnGiamGiaTrenMatHangChanged();
    partial void OnGiamGiaTrenThanhTienChanging(System.Nullable<double> value);
    partial void OnGiamGiaTrenThanhTienChanged();
    partial void OnThanhTienChanging(System.Nullable<decimal> value);
    partial void OnThanhTienChanged();
    #endregion
		
		public CHITIETHOADONBANHANG()
		{
			this._HOADONBANHANG = default(EntityRef<HOADONBANHANG>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaHD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaHD
		{
			get
			{
				return this._MaHD;
			}
			set
			{
				if ((this._MaHD != value))
				{
					if (this._HOADONBANHANG.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaHDChanging(value);
					this.SendPropertyChanging();
					this._MaHD = value;
					this.SendPropertyChanged("MaHD");
					this.OnMaHDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenMH", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenMH
		{
			get
			{
				return this._TenMH;
			}
			set
			{
				if ((this._TenMH != value))
				{
					this.OnTenMHChanging(value);
					this.SendPropertyChanging();
					this._TenMH = value;
					this.SendPropertyChanged("TenMH");
					this.OnTenMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuong", DbType="Int")]
		public System.Nullable<int> SoLuong
		{
			get
			{
				return this._SoLuong;
			}
			set
			{
				if ((this._SoLuong != value))
				{
					this.OnSoLuongChanging(value);
					this.SendPropertyChanging();
					this._SoLuong = value;
					this.SendPropertyChanged("SoLuong");
					this.OnSoLuongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Money")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiamGiaTrenMatHang", DbType="Float")]
		public System.Nullable<double> GiamGiaTrenMatHang
		{
			get
			{
				return this._GiamGiaTrenMatHang;
			}
			set
			{
				if ((this._GiamGiaTrenMatHang != value))
				{
					this.OnGiamGiaTrenMatHangChanging(value);
					this.SendPropertyChanging();
					this._GiamGiaTrenMatHang = value;
					this.SendPropertyChanged("GiamGiaTrenMatHang");
					this.OnGiamGiaTrenMatHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiamGiaTrenThanhTien", DbType="Float")]
		public System.Nullable<double> GiamGiaTrenThanhTien
		{
			get
			{
				return this._GiamGiaTrenThanhTien;
			}
			set
			{
				if ((this._GiamGiaTrenThanhTien != value))
				{
					this.OnGiamGiaTrenThanhTienChanging(value);
					this.SendPropertyChanging();
					this._GiamGiaTrenThanhTien = value;
					this.SendPropertyChanged("GiamGiaTrenThanhTien");
					this.OnGiamGiaTrenThanhTienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThanhTien", DbType="Money")]
		public System.Nullable<decimal> ThanhTien
		{
			get
			{
				return this._ThanhTien;
			}
			set
			{
				if ((this._ThanhTien != value))
				{
					this.OnThanhTienChanging(value);
					this.SendPropertyChanging();
					this._ThanhTien = value;
					this.SendPropertyChanged("ThanhTien");
					this.OnThanhTienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOADONBANHANG_CHITIETHOADONBANHANG", Storage="_HOADONBANHANG", ThisKey="MaHD", OtherKey="MaHD", IsForeignKey=true)]
		public HOADONBANHANG HOADONBANHANG
		{
			get
			{
				return this._HOADONBANHANG.Entity;
			}
			set
			{
				HOADONBANHANG previousValue = this._HOADONBANHANG.Entity;
				if (((previousValue != value) 
							|| (this._HOADONBANHANG.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOADONBANHANG.Entity = null;
						previousValue.CHITIETHOADONBANHANGs.Remove(this);
					}
					this._HOADONBANHANG.Entity = value;
					if ((value != null))
					{
						value.CHITIETHOADONBANHANGs.Add(this);
						this._MaHD = value.MaHD;
					}
					else
					{
						this._MaHD = default(int);
					}
					this.SendPropertyChanged("HOADONBANHANG");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HANGSXCPU")]
	public partial class HANGSXCPU : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenHangSXCPU;
		
		private EntitySet<CPU> _CPUs;
		
		private EntitySet<MAINBOARD> _MAINBOARDs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenHangSXCPUChanging(string value);
    partial void OnTenHangSXCPUChanged();
    #endregion
		
		public HANGSXCPU()
		{
			this._CPUs = new EntitySet<CPU>(new Action<CPU>(this.attach_CPUs), new Action<CPU>(this.detach_CPUs));
			this._MAINBOARDs = new EntitySet<MAINBOARD>(new Action<MAINBOARD>(this.attach_MAINBOARDs), new Action<MAINBOARD>(this.detach_MAINBOARDs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenHangSXCPU", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenHangSXCPU
		{
			get
			{
				return this._TenHangSXCPU;
			}
			set
			{
				if ((this._TenHangSXCPU != value))
				{
					this.OnTenHangSXCPUChanging(value);
					this.SendPropertyChanging();
					this._TenHangSXCPU = value;
					this.SendPropertyChanged("TenHangSXCPU");
					this.OnTenHangSXCPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HANGSXCPU_CPU", Storage="_CPUs", ThisKey="TenHangSXCPU", OtherKey="TenHangSXCPU")]
		public EntitySet<CPU> CPUs
		{
			get
			{
				return this._CPUs;
			}
			set
			{
				this._CPUs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HANGSXCPU_MAINBOARD", Storage="_MAINBOARDs", ThisKey="TenHangSXCPU", OtherKey="TenHangSXCPU")]
		public EntitySet<MAINBOARD> MAINBOARDs
		{
			get
			{
				return this._MAINBOARDs;
			}
			set
			{
				this._MAINBOARDs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CPUs(CPU entity)
		{
			this.SendPropertyChanging();
			entity.HANGSXCPU = this;
		}
		
		private void detach_CPUs(CPU entity)
		{
			this.SendPropertyChanging();
			entity.HANGSXCPU = null;
		}
		
		private void attach_MAINBOARDs(MAINBOARD entity)
		{
			this.SendPropertyChanging();
			entity.HANGSXCPU = this;
		}
		
		private void detach_MAINBOARDs(MAINBOARD entity)
		{
			this.SendPropertyChanging();
			entity.HANGSXCPU = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HARDDISK")]
	public partial class HARDDISK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ten;
		
		private string _TenLoaiHD;
		
		private System.Nullable<decimal> _DonGia;
		
		private string _HangSX;
		
		private string _Interface;
		
		private string _TenSize;
		
		private string _TenLoaiHDPS;
		
		private string _MoTa;
		
		private EntityRef<HARDDISKINTERFACE> _HARDDISKINTERFACE;
		
		private EntityRef<HARDDISKPSTYPE> _HARDDISKPSTYPE;
		
		private EntityRef<HARDDISKSIZE> _HARDDISKSIZE;
		
		private EntityRef<LOAIHARDDISK> _LOAIHARDDISK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnTenLoaiHDChanging(string value);
    partial void OnTenLoaiHDChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    partial void OnHangSXChanging(string value);
    partial void OnHangSXChanged();
    partial void OnInterfaceChanging(string value);
    partial void OnInterfaceChanged();
    partial void OnTenSizeChanging(string value);
    partial void OnTenSizeChanged();
    partial void OnTenLoaiHDPSChanging(string value);
    partial void OnTenLoaiHDPSChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    #endregion
		
		public HARDDISK()
		{
			this._HARDDISKINTERFACE = default(EntityRef<HARDDISKINTERFACE>);
			this._HARDDISKPSTYPE = default(EntityRef<HARDDISKPSTYPE>);
			this._HARDDISKSIZE = default(EntityRef<HARDDISKSIZE>);
			this._LOAIHARDDISK = default(EntityRef<LOAIHARDDISK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiHD", DbType="NVarChar(5)")]
		public string TenLoaiHD
		{
			get
			{
				return this._TenLoaiHD;
			}
			set
			{
				if ((this._TenLoaiHD != value))
				{
					if (this._LOAIHARDDISK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenLoaiHDChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiHD = value;
					this.SendPropertyChanged("TenLoaiHD");
					this.OnTenLoaiHDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Money")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HangSX", DbType="NVarChar(50)")]
		public string HangSX
		{
			get
			{
				return this._HangSX;
			}
			set
			{
				if ((this._HangSX != value))
				{
					this.OnHangSXChanging(value);
					this.SendPropertyChanging();
					this._HangSX = value;
					this.SendPropertyChanged("HangSX");
					this.OnHangSXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interface", DbType="NVarChar(10)")]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					if (this._HARDDISKINTERFACE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenSize", DbType="NVarChar(5)")]
		public string TenSize
		{
			get
			{
				return this._TenSize;
			}
			set
			{
				if ((this._TenSize != value))
				{
					if (this._HARDDISKSIZE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenSizeChanging(value);
					this.SendPropertyChanging();
					this._TenSize = value;
					this.SendPropertyChanged("TenSize");
					this.OnTenSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiHDPS", DbType="NVarChar(5)")]
		public string TenLoaiHDPS
		{
			get
			{
				return this._TenLoaiHDPS;
			}
			set
			{
				if ((this._TenLoaiHDPS != value))
				{
					if (this._HARDDISKPSTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenLoaiHDPSChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiHDPS = value;
					this.SendPropertyChanged("TenLoaiHDPS");
					this.OnTenLoaiHDPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NVarChar(MAX)")]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HARDDISKINTERFACE_HARDDISK", Storage="_HARDDISKINTERFACE", ThisKey="Interface", OtherKey="Interface", IsForeignKey=true)]
		public HARDDISKINTERFACE HARDDISKINTERFACE
		{
			get
			{
				return this._HARDDISKINTERFACE.Entity;
			}
			set
			{
				HARDDISKINTERFACE previousValue = this._HARDDISKINTERFACE.Entity;
				if (((previousValue != value) 
							|| (this._HARDDISKINTERFACE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HARDDISKINTERFACE.Entity = null;
						previousValue.HARDDISKs.Remove(this);
					}
					this._HARDDISKINTERFACE.Entity = value;
					if ((value != null))
					{
						value.HARDDISKs.Add(this);
						this._Interface = value.Interface;
					}
					else
					{
						this._Interface = default(string);
					}
					this.SendPropertyChanged("HARDDISKINTERFACE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HARDDISKPSTYPE_HARDDISK", Storage="_HARDDISKPSTYPE", ThisKey="TenLoaiHDPS", OtherKey="TenLoaiHDPS", IsForeignKey=true)]
		public HARDDISKPSTYPE HARDDISKPSTYPE
		{
			get
			{
				return this._HARDDISKPSTYPE.Entity;
			}
			set
			{
				HARDDISKPSTYPE previousValue = this._HARDDISKPSTYPE.Entity;
				if (((previousValue != value) 
							|| (this._HARDDISKPSTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HARDDISKPSTYPE.Entity = null;
						previousValue.HARDDISKs.Remove(this);
					}
					this._HARDDISKPSTYPE.Entity = value;
					if ((value != null))
					{
						value.HARDDISKs.Add(this);
						this._TenLoaiHDPS = value.TenLoaiHDPS;
					}
					else
					{
						this._TenLoaiHDPS = default(string);
					}
					this.SendPropertyChanged("HARDDISKPSTYPE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HARDDISKSIZE_HARDDISK", Storage="_HARDDISKSIZE", ThisKey="TenSize", OtherKey="TenSize", IsForeignKey=true)]
		public HARDDISKSIZE HARDDISKSIZE
		{
			get
			{
				return this._HARDDISKSIZE.Entity;
			}
			set
			{
				HARDDISKSIZE previousValue = this._HARDDISKSIZE.Entity;
				if (((previousValue != value) 
							|| (this._HARDDISKSIZE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HARDDISKSIZE.Entity = null;
						previousValue.HARDDISKs.Remove(this);
					}
					this._HARDDISKSIZE.Entity = value;
					if ((value != null))
					{
						value.HARDDISKs.Add(this);
						this._TenSize = value.TenSize;
					}
					else
					{
						this._TenSize = default(string);
					}
					this.SendPropertyChanged("HARDDISKSIZE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIHARDDISK_HARDDISK", Storage="_LOAIHARDDISK", ThisKey="TenLoaiHD", OtherKey="TenLoaiHD", IsForeignKey=true)]
		public LOAIHARDDISK LOAIHARDDISK
		{
			get
			{
				return this._LOAIHARDDISK.Entity;
			}
			set
			{
				LOAIHARDDISK previousValue = this._LOAIHARDDISK.Entity;
				if (((previousValue != value) 
							|| (this._LOAIHARDDISK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOAIHARDDISK.Entity = null;
						previousValue.HARDDISKs.Remove(this);
					}
					this._LOAIHARDDISK.Entity = value;
					if ((value != null))
					{
						value.HARDDISKs.Add(this);
						this._TenLoaiHD = value.TenLoaiHD;
					}
					else
					{
						this._TenLoaiHD = default(string);
					}
					this.SendPropertyChanged("LOAIHARDDISK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HARDDISKINTERFACE")]
	public partial class HARDDISKINTERFACE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Interface;
		
		private EntitySet<HARDDISK> _HARDDISKs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInterfaceChanging(string value);
    partial void OnInterfaceChanged();
    #endregion
		
		public HARDDISKINTERFACE()
		{
			this._HARDDISKs = new EntitySet<HARDDISK>(new Action<HARDDISK>(this.attach_HARDDISKs), new Action<HARDDISK>(this.detach_HARDDISKs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interface", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Interface
		{
			get
			{
				return this._Interface;
			}
			set
			{
				if ((this._Interface != value))
				{
					this.OnInterfaceChanging(value);
					this.SendPropertyChanging();
					this._Interface = value;
					this.SendPropertyChanged("Interface");
					this.OnInterfaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HARDDISKINTERFACE_HARDDISK", Storage="_HARDDISKs", ThisKey="Interface", OtherKey="Interface")]
		public EntitySet<HARDDISK> HARDDISKs
		{
			get
			{
				return this._HARDDISKs;
			}
			set
			{
				this._HARDDISKs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HARDDISKs(HARDDISK entity)
		{
			this.SendPropertyChanging();
			entity.HARDDISKINTERFACE = this;
		}
		
		private void detach_HARDDISKs(HARDDISK entity)
		{
			this.SendPropertyChanging();
			entity.HARDDISKINTERFACE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HARDDISKPSTYPE")]
	public partial class HARDDISKPSTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenLoaiHDPS;
		
		private EntitySet<HARDDISK> _HARDDISKs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenLoaiHDPSChanging(string value);
    partial void OnTenLoaiHDPSChanged();
    #endregion
		
		public HARDDISKPSTYPE()
		{
			this._HARDDISKs = new EntitySet<HARDDISK>(new Action<HARDDISK>(this.attach_HARDDISKs), new Action<HARDDISK>(this.detach_HARDDISKs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiHDPS", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenLoaiHDPS
		{
			get
			{
				return this._TenLoaiHDPS;
			}
			set
			{
				if ((this._TenLoaiHDPS != value))
				{
					this.OnTenLoaiHDPSChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiHDPS = value;
					this.SendPropertyChanged("TenLoaiHDPS");
					this.OnTenLoaiHDPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HARDDISKPSTYPE_HARDDISK", Storage="_HARDDISKs", ThisKey="TenLoaiHDPS", OtherKey="TenLoaiHDPS")]
		public EntitySet<HARDDISK> HARDDISKs
		{
			get
			{
				return this._HARDDISKs;
			}
			set
			{
				this._HARDDISKs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HARDDISKs(HARDDISK entity)
		{
			this.SendPropertyChanging();
			entity.HARDDISKPSTYPE = this;
		}
		
		private void detach_HARDDISKs(HARDDISK entity)
		{
			this.SendPropertyChanging();
			entity.HARDDISKPSTYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HARDDISKSIZE")]
	public partial class HARDDISKSIZE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenSize;
		
		private EntitySet<HARDDISK> _HARDDISKs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenSizeChanging(string value);
    partial void OnTenSizeChanged();
    #endregion
		
		public HARDDISKSIZE()
		{
			this._HARDDISKs = new EntitySet<HARDDISK>(new Action<HARDDISK>(this.attach_HARDDISKs), new Action<HARDDISK>(this.detach_HARDDISKs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenSize", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenSize
		{
			get
			{
				return this._TenSize;
			}
			set
			{
				if ((this._TenSize != value))
				{
					this.OnTenSizeChanging(value);
					this.SendPropertyChanging();
					this._TenSize = value;
					this.SendPropertyChanged("TenSize");
					this.OnTenSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HARDDISKSIZE_HARDDISK", Storage="_HARDDISKs", ThisKey="TenSize", OtherKey="TenSize")]
		public EntitySet<HARDDISK> HARDDISKs
		{
			get
			{
				return this._HARDDISKs;
			}
			set
			{
				this._HARDDISKs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HARDDISKs(HARDDISK entity)
		{
			this.SendPropertyChanging();
			entity.HARDDISKSIZE = this;
		}
		
		private void detach_HARDDISKs(HARDDISK entity)
		{
			this.SendPropertyChanging();
			entity.HARDDISKSIZE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOADONBANHANG")]
	public partial class HOADONBANHANG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaHD;
		
		private string _TenKH;
		
		private System.Nullable<System.DateTime> _NgayLap;
		
		private System.Nullable<decimal> _TongTien;
		
		private EntitySet<CHITIETHOADONBANHANG> _CHITIETHOADONBANHANGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaHDChanging(int value);
    partial void OnMaHDChanged();
    partial void OnTenKHChanging(string value);
    partial void OnTenKHChanged();
    partial void OnNgayLapChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayLapChanged();
    partial void OnTongTienChanging(System.Nullable<decimal> value);
    partial void OnTongTienChanged();
    #endregion
		
		public HOADONBANHANG()
		{
			this._CHITIETHOADONBANHANGs = new EntitySet<CHITIETHOADONBANHANG>(new Action<CHITIETHOADONBANHANG>(this.attach_CHITIETHOADONBANHANGs), new Action<CHITIETHOADONBANHANG>(this.detach_CHITIETHOADONBANHANGs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaHD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaHD
		{
			get
			{
				return this._MaHD;
			}
			set
			{
				if ((this._MaHD != value))
				{
					this.OnMaHDChanging(value);
					this.SendPropertyChanging();
					this._MaHD = value;
					this.SendPropertyChanged("MaHD");
					this.OnMaHDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenKH", DbType="NVarChar(50)")]
		public string TenKH
		{
			get
			{
				return this._TenKH;
			}
			set
			{
				if ((this._TenKH != value))
				{
					this.OnTenKHChanging(value);
					this.SendPropertyChanging();
					this._TenKH = value;
					this.SendPropertyChanged("TenKH");
					this.OnTenKHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayLap", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayLap
		{
			get
			{
				return this._NgayLap;
			}
			set
			{
				if ((this._NgayLap != value))
				{
					this.OnNgayLapChanging(value);
					this.SendPropertyChanging();
					this._NgayLap = value;
					this.SendPropertyChanged("NgayLap");
					this.OnNgayLapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TongTien", DbType="Money")]
		public System.Nullable<decimal> TongTien
		{
			get
			{
				return this._TongTien;
			}
			set
			{
				if ((this._TongTien != value))
				{
					this.OnTongTienChanging(value);
					this.SendPropertyChanging();
					this._TongTien = value;
					this.SendPropertyChanged("TongTien");
					this.OnTongTienChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOADONBANHANG_CHITIETHOADONBANHANG", Storage="_CHITIETHOADONBANHANGs", ThisKey="MaHD", OtherKey="MaHD")]
		public EntitySet<CHITIETHOADONBANHANG> CHITIETHOADONBANHANGs
		{
			get
			{
				return this._CHITIETHOADONBANHANGs;
			}
			set
			{
				this._CHITIETHOADONBANHANGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHITIETHOADONBANHANGs(CHITIETHOADONBANHANG entity)
		{
			this.SendPropertyChanging();
			entity.HOADONBANHANG = this;
		}
		
		private void detach_CHITIETHOADONBANHANGs(CHITIETHOADONBANHANG entity)
		{
			this.SendPropertyChanging();
			entity.HOADONBANHANG = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LAPTOP")]
	public partial class LAPTOP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ten;
		
		private string _HangSX;
		
		private System.Nullable<decimal> _DonGia;
		
		private string _TenLoaiRam;
		
		private string _TenXungNhip;
		
		private System.Nullable<bool> _supportM2;
		
		private string _MoTa;
		
		private EntityRef<XUNGNHIPRAM> _XUNGNHIPRAM;
		
		private EntityRef<LOAIRAM> _LOAIRAM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnHangSXChanging(string value);
    partial void OnHangSXChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    partial void OnTenLoaiRamChanging(string value);
    partial void OnTenLoaiRamChanged();
    partial void OnTenXungNhipChanging(string value);
    partial void OnTenXungNhipChanged();
    partial void OnsupportM2Changing(System.Nullable<bool> value);
    partial void OnsupportM2Changed();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    #endregion
		
		public LAPTOP()
		{
			this._XUNGNHIPRAM = default(EntityRef<XUNGNHIPRAM>);
			this._LOAIRAM = default(EntityRef<LOAIRAM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HangSX", DbType="NVarChar(50)")]
		public string HangSX
		{
			get
			{
				return this._HangSX;
			}
			set
			{
				if ((this._HangSX != value))
				{
					this.OnHangSXChanging(value);
					this.SendPropertyChanging();
					this._HangSX = value;
					this.SendPropertyChanged("HangSX");
					this.OnHangSXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Money")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiRam", DbType="NVarChar(10)")]
		public string TenLoaiRam
		{
			get
			{
				return this._TenLoaiRam;
			}
			set
			{
				if ((this._TenLoaiRam != value))
				{
					if (this._LOAIRAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenLoaiRamChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiRam = value;
					this.SendPropertyChanged("TenLoaiRam");
					this.OnTenLoaiRamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenXungNhip", DbType="NVarChar(10)")]
		public string TenXungNhip
		{
			get
			{
				return this._TenXungNhip;
			}
			set
			{
				if ((this._TenXungNhip != value))
				{
					if (this._XUNGNHIPRAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenXungNhipChanging(value);
					this.SendPropertyChanging();
					this._TenXungNhip = value;
					this.SendPropertyChanged("TenXungNhip");
					this.OnTenXungNhipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supportM2", DbType="Bit")]
		public System.Nullable<bool> supportM2
		{
			get
			{
				return this._supportM2;
			}
			set
			{
				if ((this._supportM2 != value))
				{
					this.OnsupportM2Changing(value);
					this.SendPropertyChanging();
					this._supportM2 = value;
					this.SendPropertyChanged("supportM2");
					this.OnsupportM2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NVarChar(MAX)")]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="XUNGNHIPRAM_LAPTOP", Storage="_XUNGNHIPRAM", ThisKey="TenXungNhip", OtherKey="TenXungNhip", IsForeignKey=true)]
		public XUNGNHIPRAM XUNGNHIPRAM
		{
			get
			{
				return this._XUNGNHIPRAM.Entity;
			}
			set
			{
				XUNGNHIPRAM previousValue = this._XUNGNHIPRAM.Entity;
				if (((previousValue != value) 
							|| (this._XUNGNHIPRAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._XUNGNHIPRAM.Entity = null;
						previousValue.LAPTOPs.Remove(this);
					}
					this._XUNGNHIPRAM.Entity = value;
					if ((value != null))
					{
						value.LAPTOPs.Add(this);
						this._TenXungNhip = value.TenXungNhip;
					}
					else
					{
						this._TenXungNhip = default(string);
					}
					this.SendPropertyChanged("XUNGNHIPRAM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIRAM_LAPTOP", Storage="_LOAIRAM", ThisKey="TenLoaiRam", OtherKey="TenLoaiRam", IsForeignKey=true)]
		public LOAIRAM LOAIRAM
		{
			get
			{
				return this._LOAIRAM.Entity;
			}
			set
			{
				LOAIRAM previousValue = this._LOAIRAM.Entity;
				if (((previousValue != value) 
							|| (this._LOAIRAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOAIRAM.Entity = null;
						previousValue.LAPTOPs.Remove(this);
					}
					this._LOAIRAM.Entity = value;
					if ((value != null))
					{
						value.LAPTOPs.Add(this);
						this._TenLoaiRam = value.TenLoaiRam;
					}
					else
					{
						this._TenLoaiRam = default(string);
					}
					this.SendPropertyChanged("LOAIRAM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOAIHARDDISK")]
	public partial class LOAIHARDDISK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenLoaiHD;
		
		private EntitySet<HARDDISK> _HARDDISKs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenLoaiHDChanging(string value);
    partial void OnTenLoaiHDChanged();
    #endregion
		
		public LOAIHARDDISK()
		{
			this._HARDDISKs = new EntitySet<HARDDISK>(new Action<HARDDISK>(this.attach_HARDDISKs), new Action<HARDDISK>(this.detach_HARDDISKs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiHD", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenLoaiHD
		{
			get
			{
				return this._TenLoaiHD;
			}
			set
			{
				if ((this._TenLoaiHD != value))
				{
					this.OnTenLoaiHDChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiHD = value;
					this.SendPropertyChanged("TenLoaiHD");
					this.OnTenLoaiHDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIHARDDISK_HARDDISK", Storage="_HARDDISKs", ThisKey="TenLoaiHD", OtherKey="TenLoaiHD")]
		public EntitySet<HARDDISK> HARDDISKs
		{
			get
			{
				return this._HARDDISKs;
			}
			set
			{
				this._HARDDISKs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HARDDISKs(HARDDISK entity)
		{
			this.SendPropertyChanging();
			entity.LOAIHARDDISK = this;
		}
		
		private void detach_HARDDISKs(HARDDISK entity)
		{
			this.SendPropertyChanging();
			entity.LOAIHARDDISK = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOAIRAM")]
	public partial class LOAIRAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenLoaiRam;
		
		private EntitySet<LAPTOP> _LAPTOPs;
		
		private EntitySet<MAINBOARD> _MAINBOARDs;
		
		private EntitySet<RAM> _RAMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenLoaiRamChanging(string value);
    partial void OnTenLoaiRamChanged();
    #endregion
		
		public LOAIRAM()
		{
			this._LAPTOPs = new EntitySet<LAPTOP>(new Action<LAPTOP>(this.attach_LAPTOPs), new Action<LAPTOP>(this.detach_LAPTOPs));
			this._MAINBOARDs = new EntitySet<MAINBOARD>(new Action<MAINBOARD>(this.attach_MAINBOARDs), new Action<MAINBOARD>(this.detach_MAINBOARDs));
			this._RAMs = new EntitySet<RAM>(new Action<RAM>(this.attach_RAMs), new Action<RAM>(this.detach_RAMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiRam", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenLoaiRam
		{
			get
			{
				return this._TenLoaiRam;
			}
			set
			{
				if ((this._TenLoaiRam != value))
				{
					this.OnTenLoaiRamChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiRam = value;
					this.SendPropertyChanged("TenLoaiRam");
					this.OnTenLoaiRamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIRAM_LAPTOP", Storage="_LAPTOPs", ThisKey="TenLoaiRam", OtherKey="TenLoaiRam")]
		public EntitySet<LAPTOP> LAPTOPs
		{
			get
			{
				return this._LAPTOPs;
			}
			set
			{
				this._LAPTOPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIRAM_MAINBOARD", Storage="_MAINBOARDs", ThisKey="TenLoaiRam", OtherKey="TenLoaiRam")]
		public EntitySet<MAINBOARD> MAINBOARDs
		{
			get
			{
				return this._MAINBOARDs;
			}
			set
			{
				this._MAINBOARDs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIRAM_RAM", Storage="_RAMs", ThisKey="TenLoaiRam", OtherKey="TenLoaiRam")]
		public EntitySet<RAM> RAMs
		{
			get
			{
				return this._RAMs;
			}
			set
			{
				this._RAMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LAPTOPs(LAPTOP entity)
		{
			this.SendPropertyChanging();
			entity.LOAIRAM = this;
		}
		
		private void detach_LAPTOPs(LAPTOP entity)
		{
			this.SendPropertyChanging();
			entity.LOAIRAM = null;
		}
		
		private void attach_MAINBOARDs(MAINBOARD entity)
		{
			this.SendPropertyChanging();
			entity.LOAIRAM = this;
		}
		
		private void detach_MAINBOARDs(MAINBOARD entity)
		{
			this.SendPropertyChanging();
			entity.LOAIRAM = null;
		}
		
		private void attach_RAMs(RAM entity)
		{
			this.SendPropertyChanging();
			entity.LOAIRAM = this;
		}
		
		private void detach_RAMs(RAM entity)
		{
			this.SendPropertyChanging();
			entity.LOAIRAM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MAINBOARD")]
	public partial class MAINBOARD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ten;
		
		private System.Nullable<decimal> _DonGia;
		
		private string _TenHangSXCPU;
		
		private string _TenSocket;
		
		private string _TenLoaiRam;
		
		private System.Nullable<bool> _SupportM2;
		
		private string _MoTa;
		
		private EntitySet<MAINBOARDDETAIL> _MAINBOARDDETAILs;
		
		private EntityRef<CPUSOCKET> _CPUSOCKET;
		
		private EntityRef<HANGSXCPU> _HANGSXCPU;
		
		private EntityRef<LOAIRAM> _LOAIRAM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    partial void OnTenHangSXCPUChanging(string value);
    partial void OnTenHangSXCPUChanged();
    partial void OnTenSocketChanging(string value);
    partial void OnTenSocketChanged();
    partial void OnTenLoaiRamChanging(string value);
    partial void OnTenLoaiRamChanged();
    partial void OnSupportM2Changing(System.Nullable<bool> value);
    partial void OnSupportM2Changed();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    #endregion
		
		public MAINBOARD()
		{
			this._MAINBOARDDETAILs = new EntitySet<MAINBOARDDETAIL>(new Action<MAINBOARDDETAIL>(this.attach_MAINBOARDDETAILs), new Action<MAINBOARDDETAIL>(this.detach_MAINBOARDDETAILs));
			this._CPUSOCKET = default(EntityRef<CPUSOCKET>);
			this._HANGSXCPU = default(EntityRef<HANGSXCPU>);
			this._LOAIRAM = default(EntityRef<LOAIRAM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Money")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenHangSXCPU", DbType="NVarChar(10)")]
		public string TenHangSXCPU
		{
			get
			{
				return this._TenHangSXCPU;
			}
			set
			{
				if ((this._TenHangSXCPU != value))
				{
					if (this._HANGSXCPU.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenHangSXCPUChanging(value);
					this.SendPropertyChanging();
					this._TenHangSXCPU = value;
					this.SendPropertyChanged("TenHangSXCPU");
					this.OnTenHangSXCPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenSocket", DbType="NVarChar(10)")]
		public string TenSocket
		{
			get
			{
				return this._TenSocket;
			}
			set
			{
				if ((this._TenSocket != value))
				{
					if (this._CPUSOCKET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenSocketChanging(value);
					this.SendPropertyChanging();
					this._TenSocket = value;
					this.SendPropertyChanged("TenSocket");
					this.OnTenSocketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiRam", DbType="NVarChar(10)")]
		public string TenLoaiRam
		{
			get
			{
				return this._TenLoaiRam;
			}
			set
			{
				if ((this._TenLoaiRam != value))
				{
					if (this._LOAIRAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenLoaiRamChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiRam = value;
					this.SendPropertyChanged("TenLoaiRam");
					this.OnTenLoaiRamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportM2", DbType="Bit")]
		public System.Nullable<bool> SupportM2
		{
			get
			{
				return this._SupportM2;
			}
			set
			{
				if ((this._SupportM2 != value))
				{
					this.OnSupportM2Changing(value);
					this.SendPropertyChanging();
					this._SupportM2 = value;
					this.SendPropertyChanged("SupportM2");
					this.OnSupportM2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NVarChar(MAX)")]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAINBOARD_MAINBOARDDETAIL", Storage="_MAINBOARDDETAILs", ThisKey="Ten", OtherKey="Ten")]
		public EntitySet<MAINBOARDDETAIL> MAINBOARDDETAILs
		{
			get
			{
				return this._MAINBOARDDETAILs;
			}
			set
			{
				this._MAINBOARDDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CPUSOCKET_MAINBOARD", Storage="_CPUSOCKET", ThisKey="TenSocket", OtherKey="TenSocket", IsForeignKey=true)]
		public CPUSOCKET CPUSOCKET
		{
			get
			{
				return this._CPUSOCKET.Entity;
			}
			set
			{
				CPUSOCKET previousValue = this._CPUSOCKET.Entity;
				if (((previousValue != value) 
							|| (this._CPUSOCKET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CPUSOCKET.Entity = null;
						previousValue.MAINBOARDs.Remove(this);
					}
					this._CPUSOCKET.Entity = value;
					if ((value != null))
					{
						value.MAINBOARDs.Add(this);
						this._TenSocket = value.TenSocket;
					}
					else
					{
						this._TenSocket = default(string);
					}
					this.SendPropertyChanged("CPUSOCKET");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HANGSXCPU_MAINBOARD", Storage="_HANGSXCPU", ThisKey="TenHangSXCPU", OtherKey="TenHangSXCPU", IsForeignKey=true)]
		public HANGSXCPU HANGSXCPU
		{
			get
			{
				return this._HANGSXCPU.Entity;
			}
			set
			{
				HANGSXCPU previousValue = this._HANGSXCPU.Entity;
				if (((previousValue != value) 
							|| (this._HANGSXCPU.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HANGSXCPU.Entity = null;
						previousValue.MAINBOARDs.Remove(this);
					}
					this._HANGSXCPU.Entity = value;
					if ((value != null))
					{
						value.MAINBOARDs.Add(this);
						this._TenHangSXCPU = value.TenHangSXCPU;
					}
					else
					{
						this._TenHangSXCPU = default(string);
					}
					this.SendPropertyChanged("HANGSXCPU");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIRAM_MAINBOARD", Storage="_LOAIRAM", ThisKey="TenLoaiRam", OtherKey="TenLoaiRam", IsForeignKey=true)]
		public LOAIRAM LOAIRAM
		{
			get
			{
				return this._LOAIRAM.Entity;
			}
			set
			{
				LOAIRAM previousValue = this._LOAIRAM.Entity;
				if (((previousValue != value) 
							|| (this._LOAIRAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOAIRAM.Entity = null;
						previousValue.MAINBOARDs.Remove(this);
					}
					this._LOAIRAM.Entity = value;
					if ((value != null))
					{
						value.MAINBOARDs.Add(this);
						this._TenLoaiRam = value.TenLoaiRam;
					}
					else
					{
						this._TenLoaiRam = default(string);
					}
					this.SendPropertyChanged("LOAIRAM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MAINBOARDDETAILs(MAINBOARDDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.MAINBOARD = this;
		}
		
		private void detach_MAINBOARDDETAILs(MAINBOARDDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.MAINBOARD = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MAINBOARDDETAILS")]
	public partial class MAINBOARDDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Ten;
		
		private string _TenXungNhip;
		
		private EntityRef<MAINBOARD> _MAINBOARD;
		
		private EntityRef<XUNGNHIPRAM> _XUNGNHIPRAM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnTenXungNhipChanging(string value);
    partial void OnTenXungNhipChanged();
    #endregion
		
		public MAINBOARDDETAIL()
		{
			this._MAINBOARD = default(EntityRef<MAINBOARD>);
			this._XUNGNHIPRAM = default(EntityRef<XUNGNHIPRAM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50)")]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					if (this._MAINBOARD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenXungNhip", DbType="NVarChar(10)")]
		public string TenXungNhip
		{
			get
			{
				return this._TenXungNhip;
			}
			set
			{
				if ((this._TenXungNhip != value))
				{
					if (this._XUNGNHIPRAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenXungNhipChanging(value);
					this.SendPropertyChanging();
					this._TenXungNhip = value;
					this.SendPropertyChanged("TenXungNhip");
					this.OnTenXungNhipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MAINBOARD_MAINBOARDDETAIL", Storage="_MAINBOARD", ThisKey="Ten", OtherKey="Ten", IsForeignKey=true)]
		public MAINBOARD MAINBOARD
		{
			get
			{
				return this._MAINBOARD.Entity;
			}
			set
			{
				MAINBOARD previousValue = this._MAINBOARD.Entity;
				if (((previousValue != value) 
							|| (this._MAINBOARD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MAINBOARD.Entity = null;
						previousValue.MAINBOARDDETAILs.Remove(this);
					}
					this._MAINBOARD.Entity = value;
					if ((value != null))
					{
						value.MAINBOARDDETAILs.Add(this);
						this._Ten = value.Ten;
					}
					else
					{
						this._Ten = default(string);
					}
					this.SendPropertyChanged("MAINBOARD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="XUNGNHIPRAM_MAINBOARDDETAIL", Storage="_XUNGNHIPRAM", ThisKey="TenXungNhip", OtherKey="TenXungNhip", IsForeignKey=true)]
		public XUNGNHIPRAM XUNGNHIPRAM
		{
			get
			{
				return this._XUNGNHIPRAM.Entity;
			}
			set
			{
				XUNGNHIPRAM previousValue = this._XUNGNHIPRAM.Entity;
				if (((previousValue != value) 
							|| (this._XUNGNHIPRAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._XUNGNHIPRAM.Entity = null;
						previousValue.MAINBOARDDETAILs.Remove(this);
					}
					this._XUNGNHIPRAM.Entity = value;
					if ((value != null))
					{
						value.MAINBOARDDETAILs.Add(this);
						this._TenXungNhip = value.TenXungNhip;
					}
					else
					{
						this._TenXungNhip = default(string);
					}
					this.SendPropertyChanged("XUNGNHIPRAM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PSU")]
	public partial class PSU : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ten;
		
		private System.Nullable<decimal> _DonGia;
		
		private string _HangSX;
		
		private System.Nullable<int> _Power;
		
		private string _MoTa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    partial void OnHangSXChanging(string value);
    partial void OnHangSXChanged();
    partial void OnPowerChanging(System.Nullable<int> value);
    partial void OnPowerChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    #endregion
		
		public PSU()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Money")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HangSX", DbType="NVarChar(50)")]
		public string HangSX
		{
			get
			{
				return this._HangSX;
			}
			set
			{
				if ((this._HangSX != value))
				{
					this.OnHangSXChanging(value);
					this.SendPropertyChanging();
					this._HangSX = value;
					this.SendPropertyChanged("HangSX");
					this.OnHangSXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Power", DbType="Int")]
		public System.Nullable<int> Power
		{
			get
			{
				return this._Power;
			}
			set
			{
				if ((this._Power != value))
				{
					this.OnPowerChanging(value);
					this.SendPropertyChanging();
					this._Power = value;
					this.SendPropertyChanged("Power");
					this.OnPowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NVarChar(MAX)")]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RAM")]
	public partial class RAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ten;
		
		private System.Nullable<decimal> _DonGia;
		
		private string _HangSX;
		
		private string _TenLoaiRam;
		
		private string _TenXungNhip;
		
		private string _Size;
		
		private System.Nullable<bool> _ForLapTop;
		
		private EntityRef<LOAIRAM> _LOAIRAM;
		
		private EntityRef<XUNGNHIPRAM> _XUNGNHIPRAM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    partial void OnHangSXChanging(string value);
    partial void OnHangSXChanged();
    partial void OnTenLoaiRamChanging(string value);
    partial void OnTenLoaiRamChanged();
    partial void OnTenXungNhipChanging(string value);
    partial void OnTenXungNhipChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnForLapTopChanging(System.Nullable<bool> value);
    partial void OnForLapTopChanged();
    #endregion
		
		public RAM()
		{
			this._LOAIRAM = default(EntityRef<LOAIRAM>);
			this._XUNGNHIPRAM = default(EntityRef<XUNGNHIPRAM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Money")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HangSX", DbType="NVarChar(50)")]
		public string HangSX
		{
			get
			{
				return this._HangSX;
			}
			set
			{
				if ((this._HangSX != value))
				{
					this.OnHangSXChanging(value);
					this.SendPropertyChanging();
					this._HangSX = value;
					this.SendPropertyChanged("HangSX");
					this.OnHangSXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoaiRam", DbType="NVarChar(10)")]
		public string TenLoaiRam
		{
			get
			{
				return this._TenLoaiRam;
			}
			set
			{
				if ((this._TenLoaiRam != value))
				{
					if (this._LOAIRAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenLoaiRamChanging(value);
					this.SendPropertyChanging();
					this._TenLoaiRam = value;
					this.SendPropertyChanged("TenLoaiRam");
					this.OnTenLoaiRamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenXungNhip", DbType="NVarChar(10)")]
		public string TenXungNhip
		{
			get
			{
				return this._TenXungNhip;
			}
			set
			{
				if ((this._TenXungNhip != value))
				{
					if (this._XUNGNHIPRAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenXungNhipChanging(value);
					this.SendPropertyChanging();
					this._TenXungNhip = value;
					this.SendPropertyChanged("TenXungNhip");
					this.OnTenXungNhipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="NVarChar(5)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForLapTop", DbType="Bit")]
		public System.Nullable<bool> ForLapTop
		{
			get
			{
				return this._ForLapTop;
			}
			set
			{
				if ((this._ForLapTop != value))
				{
					this.OnForLapTopChanging(value);
					this.SendPropertyChanging();
					this._ForLapTop = value;
					this.SendPropertyChanged("ForLapTop");
					this.OnForLapTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOAIRAM_RAM", Storage="_LOAIRAM", ThisKey="TenLoaiRam", OtherKey="TenLoaiRam", IsForeignKey=true)]
		public LOAIRAM LOAIRAM
		{
			get
			{
				return this._LOAIRAM.Entity;
			}
			set
			{
				LOAIRAM previousValue = this._LOAIRAM.Entity;
				if (((previousValue != value) 
							|| (this._LOAIRAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOAIRAM.Entity = null;
						previousValue.RAMs.Remove(this);
					}
					this._LOAIRAM.Entity = value;
					if ((value != null))
					{
						value.RAMs.Add(this);
						this._TenLoaiRam = value.TenLoaiRam;
					}
					else
					{
						this._TenLoaiRam = default(string);
					}
					this.SendPropertyChanged("LOAIRAM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="XUNGNHIPRAM_RAM", Storage="_XUNGNHIPRAM", ThisKey="TenXungNhip", OtherKey="TenXungNhip", IsForeignKey=true)]
		public XUNGNHIPRAM XUNGNHIPRAM
		{
			get
			{
				return this._XUNGNHIPRAM.Entity;
			}
			set
			{
				XUNGNHIPRAM previousValue = this._XUNGNHIPRAM.Entity;
				if (((previousValue != value) 
							|| (this._XUNGNHIPRAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._XUNGNHIPRAM.Entity = null;
						previousValue.RAMs.Remove(this);
					}
					this._XUNGNHIPRAM.Entity = value;
					if ((value != null))
					{
						value.RAMs.Add(this);
						this._TenXungNhip = value.TenXungNhip;
					}
					else
					{
						this._TenXungNhip = default(string);
					}
					this.SendPropertyChanged("XUNGNHIPRAM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VGA")]
	public partial class VGA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ten;
		
		private System.Nullable<decimal> _DonGia;
		
		private string _HangSX;
		
		private System.Nullable<int> _Power;
		
		private string _MoTa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    partial void OnHangSXChanging(string value);
    partial void OnHangSXChanged();
    partial void OnPowerChanging(System.Nullable<int> value);
    partial void OnPowerChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    #endregion
		
		public VGA()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Money")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HangSX", DbType="NVarChar(50)")]
		public string HangSX
		{
			get
			{
				return this._HangSX;
			}
			set
			{
				if ((this._HangSX != value))
				{
					this.OnHangSXChanging(value);
					this.SendPropertyChanging();
					this._HangSX = value;
					this.SendPropertyChanged("HangSX");
					this.OnHangSXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Power", DbType="Int")]
		public System.Nullable<int> Power
		{
			get
			{
				return this._Power;
			}
			set
			{
				if ((this._Power != value))
				{
					this.OnPowerChanging(value);
					this.SendPropertyChanging();
					this._Power = value;
					this.SendPropertyChanged("Power");
					this.OnPowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NVarChar(MAX)")]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
